install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirk()
swirl()
swirl()
exit()
install.packages("jpeg")
swirl(0)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, color = "blue")
boxplot(ppm, col = "blue")
boxplot(ppm, col = "blue", h = 12)
abline(h = 12)
hist(ppm, col='green')
rug(ppm)
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col="magenta",lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(region)
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot( pm25~region,  data=pollution, col="red" )
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, pollution$region == "east")
east <- subset(pollution, region == "east")
head(east)
hist(pm25, col="green")
hist( east$pm25 , col="green")
hist( subset(pollution, region=="west" )$pm25 , color="green" )
hist( subset(pollution, region=="west" )$pm25 , col ="green" )
with(pollution, plot())
with(pollution, plot(x = pm25, y=latitude))
with(pollution, plot(latitude, pm25))
abline(12, lwd= 2, lty= 2)
abline(v = 12, lwd= 2, lty= 2)
abline(h = 12, lwd= 2, lty= 2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h-12. lwd=2, lty = 2)
abline(h=12. lwd=2, lty = 2)
abline(h=12 , lwd=2, lty = 2)
par(mfrow=c(1,2), mar= c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude. west$pm25, main="West")
plot(west$latitude, west$pm25, main="West")
plot(eest$latitude, eest$pm25, main="Eest")
plot(east$latitude, east$pm25, main="East")
?Devices
with(faithful, plot(eruptions, waiting) )
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting) )
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
plot(mean(cars$speed), max(cars$dist), "SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
state$region
table(state$region)
xyplot(Life.Exp ~ Income |region, state, layout(c(4,1)))
xyplot(Life.Exp ~ Income |region, state, layout = c(4,1))
xyplot(Life.Exp ~ Income |region, state, layout = c(2,2))
head(mpg)
dim(mpg)
mpg$model
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
swirl()
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE
)
hist(airquality$Ozone)
airquality$Month
table(airquality$Month)
boxplot(Ozone~month, airquality)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab="Ozone (ppb)", col.axis="blue" , col.lab="red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par)
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$wind, airquality$Ozone, type = n)
plot(airquality$wind, airquality$Ozone, type = "n")
plot(airquality$wind, airquality$Ozone)
airqulaity
head(airquality)
head(airquality$Wind, type = "n", airquality$Ozone)
plot(airquality$Wind, type = "n", airquality$Ozone)
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
plot(may$Wind, may$Ozone, col="blue", pch=17)
points(may$Wind, may$Ozone, col="blue", pch=17)
title(main = "Wind and Ozone in NYC")
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch = c(17,8), col=("blue","red"), legend = c("May","Other Months"))
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other Months"))
abline(median(airquality$Wind), lty=2, lwd=2)
abline(v = median(airquality$Wind), lty=2, lwd=2)
par(mfrow(1,2))
par(mfrow(c(1,2))
)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone , title = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone , main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R , main = "Ozone and Solar Radiation")
par(mfrow = c(1,
| 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone , main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R , main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone , main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone , main = "Ozone and Temperature")
mtext("Ozone and Weather in New Work City", outer = TRUE)
mtext("Ozone and Weather in New York City", outer = TRUE)
swirl()
library("Swirl")
library("swirl")
swirl()
head(airquality)
xyplot(Ozone~wind, data=airquality)
xyplot(Ozone~Wind, data=airquality)
xyplot(Ozone~Wind, data=airquality, col="red", pch = 8 main = "Big Apple Data")
xyplot(Ozone~Wind, data=airquality, col="red", pch = 8,  main = "Big Apple Data")
xyplot(Ozone~Wind, data=airquality, pch = 8, col="red", main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout= c(5,1))
xyplot(Ozone~Wind | Month , data=airquality, layout= c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x/f, layout = c(2,1))
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut))
table(diamonds$color, diamonds$cut)
myedit(myLabels.R)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip=FALSE, pch =20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut, data=diamonds, pch =20, xlab=myxlab, ylab=myylab, main=mymain)
sample(colors(), 10)
pal <- colorRamp(c("red","blue"))
pal[0]
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
>rgb
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha = 0.5)
p3(5)
plot(x,y, pch = 19, col=rgb(0,0.5,0.5))
plot(x,y, pch = 19, col=rgb(0,0.5,0.5,0.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pla <- colorRampPalette((cols))
pla <- colorRampPalette(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point","smooth"))
qplot(y = hwy, data = mpg, col=drv)
qplot(y = hwy, data = mpg, color =drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color="manufacturer")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill = drv)
qplot(displ,hwy,data=,pg, facets = .~drv)
qplot(displ,hwy,data=,pg, facets = . ~ drv)
qplot(displ,hwy,data=mpg, facets = . ~ drv)
qplot(hwy, data=mpg, facets = srv ~., binwidth = 2)
qplot(hwy, data=mpg, facets = drv ~., binwidth = 2)
qplot(displ,hwy, data=,pg, geom=c("point","smooth"), facets = .~drv)
qplot(displ,hwy, data=mpg, geom=c("point","smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes = c("displ","hwy"))
g <- ggplot(mpg, aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point() + geom_smooth()
g+geom_point() + geom_smooth(method="lm")
g+geom_point() + geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink", size = 4, alpha=1/2)
g + geom_point(size = 4, alpha=1/2, aes(color = drv))
g + geom_point( aes(color = drv), labs(title = "Swirl Rules!"), labs(x="Displacement", y="Hwy Mileage") )
g + geom_point( aes(color = drv) + labs(title = "Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage") )
g + geom_point( aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage") )
g + geom_point( aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv) , size = 2, alpha = 1/2) + geom_smooth( size = 4, lty=3, method="lm", se = FALSE)
g + geom_point(aes(color = drv) , size = 2, alpha = 1/2) + geom_smooth( size = 4, linetype=3, method="lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx,myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g + geom_line()
g + geom_line(ylim = c(-3,3))
g + geom_line() + ylim(c(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x=displ, y = hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black") + labs(x= "Displacement", y="Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth = 18947/30)
qplot(price, data=diamonds, binwidth = 18497/30)
brk
now
counts
qplot(price, data=diamonds, binwidth = 18497/30, fill = "cut")
qplot(price, data=diamonds, binwidth = 18497/30, fill =cut)
source('~/GitHub/ExData_Plotting1/plot1.R')
library(swirl)
Varun
swirl()
qplot(price, data = diamonds, geom="density")
qplot(price, data = diamonds, geom="density", color="cut")
qplot(price, data = diamonds, geom="density", color=cut)
qplo(carat, price, data=diamonds)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color = cut)
qplot(carat, price, data=diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data=diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color = cut) + geom_smooth(method = "lm") + facets(.~cut)
qplot(carat, price, data=diamonds, color = cut) + geom_smooth(method = "lm") + facets(. ~ cut)
qplot(carat, price, data=diamonds, color = cut, facets = .~ cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth,price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$cut, seq(0,1,length = 4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color="pink")
ggplot(diamonds, aes(carat,price)) + geom_boxplot() + facet_grid(. ~ cut )
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
>lpoints
?lpoints
?trellis.par.set
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?panel.abline
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(swirl)
Varun
swirl()
sessionInfo(package = MASS)
sessionInfo(package = "MASS")
swirl()
swirl()
install.packages("spam")
swirl()
1
swirl()
swirl()
swirl()
swirl()
swirl()
installed.packages("fields")
installed.packages("fields")
swirl()
swirl()
swirl()
swirl()
View(testdat)
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-a.R')
setwd("C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML")
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-a.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-a.R')
install.packages("klar")
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-a.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-a.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-a.R')
tescore
mean(tescore)
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-a.R')
View(tescore)
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-b.R')
tescore
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-b.R')
View(tescore)
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-c.R')
teclasses
confusionMatrix(data=teclasses, bigy[-wtd])
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-c.R')
acc$positive
acc$overall
acc$overall[1]
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-c.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-d.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-d.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-d.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-d.R')
labels$class
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/hw1-d.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/Assignment1-2/hw2a.R')
setwd('./Assignment1-2')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/Assignment1-2/hw2a.R')
cont_mat
conf_mat$overall
pred_bern$classlabels
print(conf_mat$overall[1])
pred_bern
pred_bern$Pc
pred_bern$call
pred_bern$nb.predicted
pred_bern$nb.predicted == ted$y
sum(pred_bern$nb.predicted == ted$y)
pred_bern$Pc
sum(pred_bern$Pc)/10
sum(pred_bern$Pc)
sum(pred_bern$nb.predicted == ted$y)/length(ted$y)
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/Assignment1-2/hw2a.R')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/Assignment1-2/hw-2.R')
?resize
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/Assignment1-2/random_forest.r')
predictions$predict
sum(predictions$predict == ted$y)
sum(predictions$predict == ted$y)/length(ted$y)
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/Assignment1-2/random_forest.r')
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/Assignment1-2/random_forest.r')
calc_rf(10,16)
calc_rf(20,4)
calc_rf(20,8)
calc_rf(20,16)
calc_rf(30,4)
calc_rf(30,8)
calc_rf(30,16)
source('C:/Users/I061985/Desktop/MCSDS/CS 498 - Applied Machine Learning/Assignments/CS498-AML/Assignment1-2/hw2a.R')
